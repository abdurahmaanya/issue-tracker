// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#String
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
    teams         Team[]
}

model Team {
    id            Int    @id @default(sequence())
    name          String   
    projects      Project[]
    leadMember    User     @relation(fields: [leadMemberId], references: [id], onDelete: Cascade)
    leadMemberId  String
}

model Project {
    id            Int    @id @default(sequence())
    name          String   
    isPersonal    Boolean      @default(true)
    sprints       Sprint[]
    issues        Issue[]
    team          Team?      @relation(fields: [teamId], references: [id])
    teamId        Int?
    owner         User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId       String
}

model Sprint{
    id            Int    @id @default(sequence())
    startsAt      DateTime?
    finishesAt    DateTime?
    goal          String?
    project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId     Int
    issues        Issue[]
    status        Status    @default(TODO)
}

model Issue{
    id            Int    @id @default(sequence())
    title         String
    issueType     IssueType @default(Bug)
    description   String?
    assignee      String?
    project       Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId     Int
    sprint        Sprint?     @relation(fields: [sprintId], references: [id])
    sprintId      Int?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime?  @updatedAt
    closedAt      DateTime?
    status        Status    @default(TODO)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum IssueType{
    Bug
    Task
}

enum Status{
    TODO
    INPROGRESS
    DONE
}